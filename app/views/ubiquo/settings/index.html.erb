<style type="text/css">
  #contexts table td:first-child{
    width:20%;
  }
  .context-header{
     font-size: 1.2em;
     font-weight: bolder;
      background:#ECF5F4;
  }
  #contexts form{
    padding:0;
  }
  #contexts .form-item {
    margin:0;
  }
  #contexts .form-item fieldset{
    margin:0.1em 0.1em 0.1em 0.1em;
    padding:0;
  }  
  #contexts .form-item .number{
    background:#F0BB47;
    width:15%;
  }
  #contexts tr:hover{
    background:inherit;
  }
  #contexts form{
    border: 0;
  }
  #contexts form input, #contexts form textarea, #contexts form select{
    padding: 0.1em;
  }
  
  #contexts textarea, #contexts input{
    width: 100% !important;
  }
  #bulk_submit input{
    margin-left:90%;    
  }
  #contexts .translatable{
    
  }
  

</style>
<h1>
  <%= render :partial => 'title' %>
</h1>

<h2>
  <%= render :partial => 'submenu' %>
</h2>

<%= render :partial => "shared/ubiquo/feedback" %>

<% # = show_filter_info
%>

<div id="contexts">
  <% @contexts.each do |context, settings| %>
    <h3 class="context-header"><%= context %></h3>
    <%= setting_list(context, settings) %>
  <% end %>
</div>

<% javascript_tag do -%>
  function collectAndSendValues(selectedContext, selectedSettingKey){
    var settings = {}
    var contexts = $$('#contexts > table');
    for(var i = 0; i < contexts.length; ++i){
      var contextKey = $(contexts[i]).readAttribute('id')
      if(selectedContext == null || contextKey == selectedContext ){
        settings[contextKey] = {}
        var settingsRows = $(contexts[i]).getElementsBySelector('tbody tr');
        for(var j = 0; j < settingsRows.length; ++j){
          var settingKey = settingsRows[j].readAttribute('id');          
          settingKey = settingKey.replace('setting_','');
          if(selectedSettingKey == null || settingKey == selectedSettingKey){        
              
            var settingValue;
            // Is a select 
            if(settingsRows[j].getElementsBySelector('input[name="' + settingKey + '"]').length == 0 &&
                settingsRows[j].getElementsBySelector('select[name="' + settingKey + '"]').length){
              settingValue = settingsRows[j].getElementsBySelector('select[name="' + settingKey + '"]').first().value;  
            }
            // Is a textarea
            else if(settingsRows[j].getElementsBySelector('textarea[name="' + settingKey + '"]').length){
              settingValue = settingsRows[j].getElementsBySelector('textarea[name="' + settingKey + '"]').first().value;  
            }
            // Is a input
            else {    
              settingValue = settingsRows[j].getElementsBySelector('input[name="' + settingKey + '"]').first().value;
              // Is a checkbox
              if(settingsRows[j].getElementsBySelector('input[name="' + settingKey + '"]').first().type == 'checkbox'
                 && settingsRows[j].getElementsBySelector('input[name="' + settingKey + '"]').first().checked == false){
                settingValue = false;
              }     
              // Is a password
              if(settingsRows[j].getElementsBySelector('input[name="' + settingKey + '"]').first().type == 'password'
                 && settingsRows[j].getElementsBySelector('input[name="confirmation_' + settingKey + '"]').length){

                var confirmationKey = "confirmation_" + settingKey
                var confirmationValue = settingsRows[j].getElementsBySelector('input[name="confirmation_' + settingKey + '"]').first().value
                settings[contextKey][confirmationKey] = confirmationValue;
              }                   
            }
            settings[contextKey][settingKey] = settingValue;
          }
        }
      }
    }
    var form = $('bulk_submit');
    for(var context in settings) {
      for(var settingKey in settings[context]) {
        var hiddenField = document.createElement("input");
        hiddenField.setAttribute("type", "hidden");
        hiddenField.setAttribute("name", "settings" + "[" + context + "[" + settingKey + "] ]");
        hiddenField.setAttribute("value", settings[context][settingKey]);

        $(form).appendChild(hiddenField);
      }
    }
    form.submit();
  }
<% end %>


<% form_tag ubiquo_settings_path, {:onSubmit  => "return collectAndSendValues();", 
                                    :id => "bulk_submit"} do %>
  <%= submit_tag t('ubiquo.setting.index.save_all')  %>
<% end %>

<% content_for :sidebar do %>
  <%# show_filters %>
  <%# help_block_sidebar t("ubiquo.setting.index.help_message") %>
<% end %>
